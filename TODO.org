#+title: TODO

* TODO
** Rust
*** ensure stack variables are not used across await calls
     see https://tokio.rs/tokio/tutorial/io about how this hurts
*** switch to using parking_lot::mutex
*** standardize error handling -- currently errors are ignored in most places
*** redesign so that executor only writes to a socket and client only reads from it
     so that we could get rid of tokio mutex in client_manager; currently,
     client may write to socket as well in the error case, e.g., if the message
     cannot be parsed.

** C++
*** try other sanitizers (msan, asan) as well
*** handle errors in asio calls
*** audit all the uses of std::atomic
    - make sure the race conditions due to not using lock do not happen
*** explore the overhead of locking ballot_; replace NextBallot with CAS loop,
    - remove the lock, and change ballot to atomic and measure the overhead.
*** consider replacing ballot with atomic and using the CAS loop
    - and make sure to insert PAUSEs below, per recommendation of Thiago on C++
      slack: https://herbsutter.com/2012/08/31/reader-qa-how-to-write-a-cas-loop-using-stdatomics/


* TODO-after-paper-submission
*** in replay() function, if there is a gap send out a no-op command
     it is possible that at the end of prepare phase, the new leader ends up
     with a log that contains a gap; in this case the new leader should issue a
     no-op command for the gap so that the instances could be executed on the
     state machine.
*** add unit test for log::set_index
*** avoid sleeps in tests due to TCP connection re-establishment
*** handle gaps due to temporary disconnect
    - Currently, if a peer temporarily disconnects and then reconnects, then it
      will have a gap in its log. it will not be able to execute entries past
      the gap, it will not be able to prune its log, which will prevent everyone
      else from pruning their logs. when we have a gap like this, we should
      either (1) let the leader regularly run phase 1 (leader election) to have
      the peers that have fallen back to recover the lost entries, or (2) let
      the peer that has fallen behind to ask other peers and fill its log, or
      (3) resort to using log pruning that persists the state machine to disk
      and prunes the log without hearing from the peers. we do not implement
      this at the moment: if a peer temporarily disconnects and accrues a gap,
      then log pruning will be stuck on all processes.
*** evaluate the choice of a resizable circular buffer for log
    - see how boost implements it
