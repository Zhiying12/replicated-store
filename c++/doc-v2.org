* TYPES

- struct command_t
  - synopsis: a key-value command
  - fields:
    - type_: enum {get, put, del}
    - key_: string
    - value_: string (valid only if type_ == put)

- struct instance_t
  - synopsis: entry in the log.
  - fields:
    - round_: round of the instance
    - command_: command_t
    - index_: index of the command in the log
    - state_: enum {in-progress, committed, executed}
    - client-id_: id of the client in the leader that issued the command
  - description: each instance starts in the in-progress state, and changes to
    the committed state once quorum has voted for it, and moves into executed
    state after it is executed. technically, we do not need the executed field
    because we are already tracking it with the tail_ (see below), but we still
    keep it for internal consistency checks: whenever we trim the log, we assert
    that state_ of the trimmed entry is executed. after the command is executed,
    we look for the client-id in the global map that maintains client-id to
    socket mapping. if found, then this is the leader that created the instance,
    and we write the response to the client; otherwise, this is a follower and
    we do nothing.

- struct accept_result_t
  - synopsis: return type of replicate() and accept()
  - fields:
    - type_: enum {ok, reject, retry}
    - leader_: int (if type_ == reject then contains id of the current leader_)

- struct prepare_result_t
  - synopsis: return type of prepare()
  - fields:
    - type_: enum {ok, reject, timeout}

* PROTOBUFS

- message accept_rpc_request
  - round_: round of the sender
  - command_: command_t
  - index_: int; index for the command_ in log_
  - client-id_: int; id of the client initiating command_

- message accept_rpc_response
  - type_: enum {ok, reject, timeout}
  - round_: round of the remote peer (valid only if type_ == reject)

- message prepare_rpc_request
  - round_: round of the sender

- message prepare_rpc_response
  - type_: enum {ok, reject, timeout}
  - round_: round of the remote peer (valid only if type_ == reject)
  - log_: instances since tail_ in the corresponding prepareRPC request (valid
    only if type_ == ok}

- message heartbeat_rpc_request
  - round_: local round
  - tail_: int (tail of the leader)
  - min_tail_: int (minimum of all tail_s seen so far)

- message heartbeat_rpc_response
  - tail_: int (local tail_)

* OBJECTS

- Replicant

  - members
    - kv_: KVStore
    - c_: Consensus
    - log_: Log
    - tp_: Threadpool
    - l_: socket
    - exe_cv_: condition_variable
    - exe_mu_: mutex
    - map_: map from client_id(int) to socket object
    - client_id_: id of the next client that will connect
    - id_: id of the peers
    - num_peers_: number of peers

  - methods

    - constructor(cfg: config)
      kv_ = new(KVStore)
      c_ = new(Consensus(cfg))
      log_ = new(Log(&exe_cv_, &exe_mu_))
      id_ = config["id"]
      client_id_ = id_
      num_peers_ = confg["num_peers"]

    - next_client_id(void) -> int
      id = client_id_
      client_id_ += num_peers_
      return id

    - run(void)
      thread(executor).start()
      for (;;) {
        socket = accept(l)
        client-id = next_client_id()
        map_[client-id] = socket
        thread(handle_client, client-id).start()
      }

    - handle_client(client-id: int)
      it = map_[client-id]
      for (;;) {
        cmd = read_command(it->socket)
        if (cmd)
          tp_.post(replicate, cmd, client-id)
        else
          break
      }
      close(it->socket)
      del it

    - replicate(cmd: command, client-id: int)
      r = c.replicate(cmd, client-id)
      if r.type_ != ok
        it = map_[client-id]
        send(it->socket, r)
        close(it->socket)
        del it

    - executor(void)
      for (;;) {
        exe_mu_.lock()
        while (!log_.executable())
          exe_cv_.sleep()
        exe_mu_.unlock()
        do {
          client-id, result = log_.execute(kv)
          respond(client-id, result)
        } while (log_.executable())
      }

    - respond(client-id, result)
      # responds to the client with the result of the command execution. this
      # function will respond to the client only if the client originally sent
      # the request to this peer when it was a leader. this constraint is
      # implicitly enforced by having each peer assign a unique id to each
      # client.
      it = map_[client-id]
      if it != null
        send(it->socket, result)

- Log

  - members

    - head_: index of the highest-numbered instance in the log. the log starts
      at index 1; therefore, head_ is initialized to 0, signifying an empty log.

    - tail_: index of the last executed instance. initialized to 0.

    - min_tail_: minimum tail_ of all peers known to peer. initialized to 0.

    - min_tail_leader_: latest minimum tail_ at the leader. initialized to 0.

    - log_: a map from int to an instance_t

    - cv_, mu_: pointers to a condition variable and mutex to wake up the
      executor thread.

  - methods

    - constructor(cv: *condition_variable, mu: *mutex)
      cv_ = cv
      mu_ = mu
      head_ = tail_ = min_tail_ = 0

    - tail(void) -> int
      return tail_

    - min_tail(void) -> int
      return min_tail_

    - advance_head(void) -> int
      return ++head_

    - executable(void) -> bool
      # returns true if the log contains an executable instance, i.e. the
      # instance right after tail_ is committed.
      return log_[tail_+1] != empty && log_[tail_+1].status == committed

    - execute(kv: KVStore) -> (client-id, result)
      # executes the next executable instance in the log, updates the instance's
      # status, increments tail_, and returns the result and the id of the
      # client that originated the command.
      assert(executable())
      instance = &log_[tail_+1]
      result = kv.execute(instance.cmd)
      instance.status = executed
      ++tail_
      return (instance.client-id_, result)

    - commit(index: int)
      # sets the status of the instance at index to committed and wakes up the
      # executor thread if the log is executable.
      exe_mu_.lock()
      assert(log_[index] != empty && log_[index].status == in-progress)
      log_[i].status = committed
      if (executable())
        exe_cv_.notify_one()
      exe_mu_.unlock()

    - commit_until(tail: int)
      # sets the status of all the instances from tail_ until tail and wakes up
      # the executor thread.
      exe_mu_.lock()
      for (int i = tail_+1; i <= tail; ++i)
        # it is possible that we receive heartbeat before we receive the accept
        # message; therefore, we should handle the case where we have a gap in
        # the log; in that case, we will break out of the loop and try
        # committing the next time we receive heartbeat from the leader;
        # hopefully, by that time, we will receive the accept message and the
        # gap will disappear.
        if (log_[index] == empty)
          break
        assert(log_[index].status == in-progress)
        log_[i].status = committed
      if (executable())
        exe_cv_.notify_one()
      exe_mu_.unlock()

    - trim_until(min_tail_leader_: int)
      # trims the instances whose commands have been executed by all peers
      while min_tail_ < min_tail_leader_
        ++min_tail_
        assert(log_[min_tail_].status == executed)
        del log_[min_tail_]

    - append(instance: instance_t)
      # this is not exactly append because there may be gaps. e.g. the leader
      # sends an accept RPC with index 10 and then another accept RPC with index
      # 11, and the second RPC arrives before the first one.
      log_[instance.index_] = instance
      head_ = max(head_, instance.index_)

    - merge(log: instance_t[])
      foreach remote_ in log {
        local_ = log_[remote_.index_]

        # since we ask peers for instances after our local tail_, instances that
        # we receive
        assert(local_.status != executed)

        # if an instance received from a peer is in executed state, then we
        # should mark it committed so that it is re-executed in our local state
        # machine.
        if remote_.status == executed
          remote_.status = committed

        if local_ == NULL || local_.round_ <= remote_.round
          log_[remote_.index] = remote_

        head_ = max(head_, remote_.index_)
      }

    - new_instances() -> instance_t[]
      # return instances since min_tail_

- Consensus

  - members
    - peers
    - head_
    - log_: Log
    - id_
    - ready_
    - last_heartbeat_
    - heartbeat_interval_
    - round_

  - methods

    - constructor(cfg: config)

    - replicate(cmd: command, client-id: int) -> accept_result_t
      if i_am_leader()
        if ready_
          return accept(cmd, log_.advance_head(), client-id)
        return accept_result_t{type_: retry, leader_: N/A}
      if someone_else_is_leader()
        return accept_result_t{type_: reject, leader_: leader()}
      # election in progress
      return accept_result_t{type_: retry, leader_: N/A}

    - accept(cmd: command, index: int, client-id: int) -> accept_result_t
      num_responses = 0
      num_ok_responses = 0
      cv, mu
      request = accept_rpc_request{command_: cmd,
                                   index_: index,
                                   round_: round_,
                                   client-id_: client-id}
      for each peer p {
        run closure in a separate thread {
          response = p.acceptRPC(request)
          lock(mu)
          ++num_responses
          if response.type_ == ok:
            ++ok_responses
          else if response.type_ == reject:
            round_ = response.round_
          # else it is a timeout error; we do nothing
          unlock(mu)
          cv.notify_one()
        }
      }
      lock(mu)
      while i_am_leader() &&
            num_ok_responses <= peers_.size()/2 &&
            num_responses != peers_.size():
        cv.wait(mu)

      if num_ok_responses > peers_.size() / 2
        log_.commit(index)
        return accept_result_t{type_: ok, leader_: N/A}
      if someone_else_is_leader()
        return accept_result_t{type_: reject, leader_: leader()}
      # RPCs timed out
      return accept_result_t{type_: retry, leader_: N/A}

    - accept_handler(message: accept_rpc_request)
      if message.round_ >= round_:
        round_ = message.round_
        instance = instance_t{round_: message.round_,
                              command_: message.command_,
                              index_: message.index_,
                              state_: in-progress,
                              client-id_: message.client-id_}
        log_.append(instance)
        return accept_rpc_response{type_: ok, round_: N/A}
      # stale message
      return accept_rpc_response{type: reject, round: round_}

    - prepare(round: int) -> prepare_result_t:
      num_responses = 0
      ok_logs = vector<instance_t[]>
      cv, mu
      request = prepare_rpc_request{round_: round}
      for each peer p {
        run closure in a separate thread {
          response = p.prepareRPC(request)
          lock(mu)
          ++num_responses
          if response.type_ == ok:
            ok_logs.push(response.log_)
          else if response.type_ == reject:
            round_ = response.round_
          # else it is a timeout error; we do nothing
          unlock(mu)
          cv.notify_one()
        }
      }
      lock(mu)
      while i_am_leader() &&
            num_ok_responses <= peers_.size()/2 &&
            num_responses != peers_.size()
        cv.wait(mu)
      # one of the above three conditions is false; handle each, starting with the
      # most likely one
      if num_ok_responses > peers_.size()/2: # we have quorum
        # merge all logs returned by other peers
        response_log = merge_logs(ok_logs)
        # then merge response_log to the local log
        log_.merge(response_log)
        return prepare_result_t{type_: ok}
      if someone_else_is_leader():
        return prepare_result_t{type_: reject}
      # multiple timeout responses
      return prepare_result_t{type_: timeout}

    - prepare_handler(message: prepare_rpc_request):
      # common case for phase1
      if message.round >= round_:
        round_ = message.round_
        return prepare_rpc_response_t{type_: ok,
                                      round_: N/A,
                                      log_: log_.new_instances()}
      # stale messages
      return prepare_rpc_response_t{type_: reject, round_: round_, log_: N/A}

    - merge_logs(ok_logs: vector<instance_t[]>) -> instance_t[]:
      response_logs = ok_logs[0]
      for the rest logs in ok_logs:
        for every instance:
          # compare with response_logs and merge it

    - prepare_thread():
      for (;;) {
        sleep until follower
        for (;;) {
          sleep(heartbeat_interval_ + random(10, heartbeat_interval_))
          lock(heartbeat_mu_)
          if time::now() - last_heartbeat_ < heartbeat_interval_:
            unlock(heartbeat_mu_)
            continue
          round = next_round#()
          # Avoid holding the lock too long
          # If there is a new leader, its heartbeat request can be handled
          unlock(heartbeat_mu_)

          prepare_result_t result = prepare(round)
          if result.type_ != ok:
            continue
          # we are a leader
          wake up heartbeat_thread
          replay()
          ready_ = true
          break
        }
      }

    - replay():
      index_ = log_.get_tail_index() + 1

      while (index_ <= head_) {
        instance = log_.get_instance(index)
        assert(instance != NULL)

        # The instance needs to accept again
        if instance.state_ == in-progress:
          accept_result_ = accept(instance.command, index)
          if accept_result_.type == leader:
            break
          if accept_result_.type == retry:
            continue

        # Else, the instance is commited, nothing needs to be done

        ++index
      }

    - heartbeat_thread():
      for (;;) {
        sleep until leader
        num_responses = 0
        ok_responses = vector
        cv, mu
        min_tail = log_.min_tail()
        for (;;) {
          request = heartbeat_rpc_request{round_: round_,
                                          tail_: log_.tail()
                                          min_tail_: min_tail}
          for each peer p {
            run closure in a separate thread {
              response = p.heartbeatRPC(request)
              lock(mu)
              ++num_responses
              if response.ok:
                ok_responses.push(response)
              unlock(mu)
              cv.notify_one()
            }
          }
          lock(mu)
          while i_am_leader() && num_responses != peers_.size():
            cv.wait(mu)
          if ok_responses.size() == peers_.size():
            min_tail = min(ok_responses)
          if someone_else_is_leader():
            break
          sleep(heartbeat_interval_)
        }
      }

    - heartbeat_handler(message: heartbeat_rpc_request):
      lock(heartbeat_mu_)
      if message.round >= round_:
        last_heartbeat_ = time::now()
        round_ = message.round_
        log_.commit_until(message_.tail_)
        log_.trim_until(message_.min_tail_)
      # stale message
      unlock(heartbeat_mu_)
      return heartbeat_rpc_response{tail_: log_.tail()}

== TODO ========================================================================

- How to handle gaps?

  Currently, if a peer temporarily disconnects and then reconnects, then it will
  have a gap in its log. it will not be able to execute entries past the gap, it
  will not be able to prune its log, which will prevent everyone else from
  pruning their logs. when we have a gap like this, we should recover it by
  asking other peers. or we should resort to using log pruning that persists the
  state machine to disk and prunes the log without hearing from the peers. we do
  not implement this at the moment: if a peer temporarily disconnects and
  accrues a gap, then log pruning will be stuck on all processes.

- how to let peers know the committed? we can do it with the heartbeat, but
  should we, given that we already let everyone know executed entries?

  - the difference between min_tail_ and the committed entries is that we can
    only communicate min_tail_ if we have received the tails of all peers,
    whereas we can communicate the committed entries once we have the responses
    from the majority.

- handle duplicate responses due to retries

  - we will handle this by having gRPC retry RPC calls.

- imagine a scenario that there is a gap in the log, like [a, b, _, d] and once
  the thread1 commits d, it starts to wait until command at index 2 is executed
  and thread1 is woken up. at that moment, this machine stops being a leader,
  and someone else starts to run. they receive the log state, and eventually,
  they determine what goes into 2, and eventually, they notify this peer about
  the state of the log. then, we should wake up thread1)

- evaluate the choice of a resizeable circular buffer (see how boost implements
  it) for log on the performance.

- evaluate the choice of not sending messages to self on performance.

- evaluate the choice of lazy (via piggybacking onto heartbeats) vs eager (via
  piggybacking onto accepts) sending commit messages to followers.

== SCRATCH SPACE ===============================================================

         1 2 3 4 5
leader: |e|e| | | |

head: 2
tail: 2
min_tail: 2

follow: |e|e| | | |

head: 2
tail: 2
min_tail: 0


- method 1
  - heartbeat only checks liveness and triggers election if leader is not alive
  - piggyback commit to the next accept
  - you need to have another thread that checks for inactivity and sends an
    explicit commit message for the last command when there is no activity

- method 2
  - heartbeat piggybacks commit message in addition to triggering leader election

- method 3
  - heartbeat only checks liveness and triggers election if leader is not alive
  - there is a separate commit phase
